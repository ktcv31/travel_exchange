{"ast":null,"code":"var _jsxFileName = \"/Users/tatianacarvajal/Documents/bootcamp/travel_exchange/frontend/src/components/Shared/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\n// Replace this with your Google Maps API key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_MAPS_API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY';\nconst MapSearch = () => {\n  _s();\n  const [location, setLocation] = useState('');\n  const [weather, setWeather] = useState(null);\n  const mapRef = useRef(null); // Reference to the map container\n  const map = useRef(null); // Reference to the Google Map\n\n  // Initialize the map when the component is mounted\n  useEffect(() => {\n    if (!map.current) {\n      map.current = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2\n      });\n    }\n  }, []);\n  const handleSearch = async () => {\n    try {\n      // Fetch weather data from a weather API\n      const weatherResponse = await axios.get(`/api/weather/${location}`);\n      setWeather(weatherResponse.data);\n\n      // Fetch geocoding data from Google Maps API\n      const geoResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {\n        params: {\n          address: location,\n          key: GOOGLE_MAPS_API_KEY\n        }\n      });\n      if (geoResponse.data.results.length > 0) {\n        const {\n          lat,\n          lng\n        } = geoResponse.data.results[0].geometry.location;\n        // Center map to new location and add marker\n        map.current.setCenter({\n          lat,\n          lng\n        });\n        map.current.setZoom(10);\n        new window.google.maps.Marker({\n          position: {\n            lat,\n            lng\n          },\n          map: map.current\n        });\n      } else {\n        alert('Location not found!');\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: location,\n      onChange: e => setLocation(e.target.value),\n      placeholder: \"Enter city or country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Weather Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Conditions: \", weather.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(MapSearch, \"n2U5Dm2x/VoLJ0IklePlGuQXRGs=\");\n_c = MapSearch;\nexport default MapSearch;\nvar _c;\n$RefreshReg$(_c, \"MapSearch\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","GOOGLE_MAPS_API_KEY","MapSearch","_s","location","setLocation","weather","setWeather","mapRef","map","current","window","google","maps","Map","center","lat","lng","zoom","handleSearch","weatherResponse","get","data","geoResponse","params","address","key","results","length","geometry","setCenter","setZoom","Marker","position","alert","error","console","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","ref","style","width","height","main","temp","description","_c","$RefreshReg$"],"sources":["/Users/tatianacarvajal/Documents/bootcamp/travel_exchange/frontend/src/components/Shared/Map.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\n// Replace this with your Google Maps API key\nconst GOOGLE_MAPS_API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY';\n\nconst MapSearch = () => {\n  const [location, setLocation] = useState('');\n  const [weather, setWeather] = useState(null);\n  const mapRef = useRef(null); // Reference to the map container\n  const map = useRef(null); // Reference to the Google Map\n\n  // Initialize the map when the component is mounted\n  useEffect(() => {\n    if (!map.current) {\n      map.current = new window.google.maps.Map(mapRef.current, {\n        center: { lat: 0, lng: 0 },\n        zoom: 2,\n      });\n    }\n  }, []);\n\n  const handleSearch = async () => {\n    try {\n      // Fetch weather data from a weather API\n      const weatherResponse = await axios.get(`/api/weather/${location}`);\n      setWeather(weatherResponse.data);\n\n      // Fetch geocoding data from Google Maps API\n      const geoResponse = await axios.get(\n        `https://maps.googleapis.com/maps/api/geocode/json`,\n        {\n          params: {\n            address: location,\n            key: GOOGLE_MAPS_API_KEY,\n          },\n        }\n      );\n\n      if (geoResponse.data.results.length > 0) {\n        const { lat, lng } = geoResponse.data.results[0].geometry.location;\n        // Center map to new location and add marker\n        map.current.setCenter({ lat, lng });\n        map.current.setZoom(10);\n        new window.google.maps.Marker({\n          position: { lat, lng },\n          map: map.current,\n        });\n      } else {\n        alert('Location not found!');\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={location}\n        onChange={(e) => setLocation(e.target.value)}\n        placeholder=\"Enter city or country\"\n      />\n      <button onClick={handleSearch}>Search</button>\n      \n      <div id=\"map\" ref={mapRef} style={{ width: '100%', height: '400px' }}></div>\n      \n      {weather && (\n        <div>\n          <h3>Weather Information</h3>\n          <p>Temperature: {weather.main.temp}Â°C</p>\n          <p>Conditions: {weather.weather[0].description}</p>\n      \n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MapSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}